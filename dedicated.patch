diff --git a/src/dawn_native/vulkan/VulkanFunctions.cpp b/src/dawn_native/vulkan/VulkanFunctions.cpp
index 8acb5974..261aabe7 100644
--- a/src/dawn_native/vulkan/VulkanFunctions.cpp
+++ b/src/dawn_native/vulkan/VulkanFunctions.cpp
@@ -290,12 +290,6 @@ namespace dawn_native { namespace vulkan {
         GET_DEVICE_PROC(UpdateDescriptorSets);
         GET_DEVICE_PROC(WaitForFences);
 
-        if (deviceInfo.properties.apiVersion >= VK_MAKE_VERSION(1, 1, 0)) {
-            GET_DEVICE_PROC(GetImageMemoryRequirements2);
-        } else {
-            GET_DEVICE_PROC(GetImageMemoryRequirements2KHR);
-        }
-
         if (deviceInfo.HasExt(DeviceExt::ExternalMemoryFD)) {
             GET_DEVICE_PROC(GetMemoryFdKHR);
             GET_DEVICE_PROC(GetMemoryFdPropertiesKHR);
diff --git a/src/dawn_native/vulkan/VulkanFunctions.h b/src/dawn_native/vulkan/VulkanFunctions.h
index addaf8c3..2e6218ee 100644
--- a/src/dawn_native/vulkan/VulkanFunctions.h
+++ b/src/dawn_native/vulkan/VulkanFunctions.h
@@ -246,8 +246,6 @@ namespace dawn_native { namespace vulkan {
         PFN_vkGetEventStatus GetEventStatus = nullptr;
         PFN_vkGetFenceStatus GetFenceStatus = nullptr;
         PFN_vkGetImageMemoryRequirements GetImageMemoryRequirements = nullptr;
-        PFN_vkGetImageMemoryRequirements2 GetImageMemoryRequirements2 = nullptr;
-        PFN_vkGetImageMemoryRequirements2KHR GetImageMemoryRequirements2KHR = nullptr;
         PFN_vkGetImageSparseMemoryRequirements GetImageSparseMemoryRequirements = nullptr;
         PFN_vkGetImageSubresourceLayout GetImageSubresourceLayout = nullptr;
         PFN_vkGetPipelineCacheData GetPipelineCacheData = nullptr;
diff --git a/src/dawn_native/vulkan/external_memory/MemoryServiceOpaqueFD.cpp b/src/dawn_native/vulkan/external_memory/MemoryServiceOpaqueFD.cpp
index 03cd73ce..70db38b7 100644
--- a/src/dawn_native/vulkan/external_memory/MemoryServiceOpaqueFD.cpp
+++ b/src/dawn_native/vulkan/external_memory/MemoryServiceOpaqueFD.cpp
@@ -106,39 +106,18 @@ namespace dawn_native { namespace vulkan { namespace external_memory {
             return DAWN_VALIDATION_ERROR("Trying to import memory with invalid handle");
         }
 
-        VkMemoryDedicatedRequirements dedicatedRequirements;
-        dedicatedRequirements.pNext = nullptr;
-        dedicatedRequirements.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
-
-        VkMemoryRequirements2 requirements;
-        requirements.pNext = &dedicatedRequirements;
-        requirements.sType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
-
-        VkImageMemoryRequirementsInfo2 info;
-        info.image = image;
-        info.pNext = nullptr;
-        info.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
-
-        mDevice->fn.GetImageMemoryRequirements2(mDevice->GetVkDevice(), &info, &requirements);
-        if (requirements.memoryRequirements.size > importParams.allocationSize) {
+        VkMemoryRequirements requirements;
+        mDevice->fn.GetImageMemoryRequirements(mDevice->GetVkDevice(), image, &requirements);
+        if (requirements.size > importParams.allocationSize) {
             return DAWN_VALIDATION_ERROR("Requested allocation size is too small for image");
         }
-        
+
         VkImportMemoryFdInfoKHR importMemoryFdInfo;
         importMemoryFdInfo.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
         importMemoryFdInfo.pNext = nullptr;
         importMemoryFdInfo.handleType = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
         importMemoryFdInfo.fd = handle;
 
-        VkMemoryDedicatedAllocateInfo dedicatedMemoryInfo;
-        dedicatedMemoryInfo.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
-        dedicatedMemoryInfo.pNext = nullptr;
-        dedicatedMemoryInfo.image = image;
-        if (dedicatedRequirements.prefersDedicatedAllocation || 
-            dedicatedRequirements.requiresDedicatedAllocation) {
-            importMemoryFdInfo.pNext = &dedicatedMemoryInfo;
-        }
-
         VkMemoryAllocateInfo allocateInfo;
         allocateInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
         allocateInfo.pNext = &importMemoryFdInfo;
@@ -149,7 +128,6 @@ namespace dawn_native { namespace vulkan { namespace external_memory {
         DAWN_TRY(CheckVkSuccess(mDevice->fn.AllocateMemory(mDevice->GetVkDevice(), &allocateInfo,
                                                            nullptr, &*allocatedMemory),
                                 "vkAllocateMemory"));
-
         return allocatedMemory;
     }
 
